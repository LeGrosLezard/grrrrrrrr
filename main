import cv2
import operator
import numpy as np
from PIL import Image
from matplotlib.pyplot import *
from collections import defaultdict
import math

def adjust_gamma(image, gamma):

    invGamma = 1.0 / gamma
    table = np.array([((i / 255.0) ** invGamma) * 255
            for i in np.arange(0, 256)]).astype("uint8")
    return cv2.LUT(image, table)


class Picture:

    @staticmethod
    def open_img(image):

        img = cv2.imread(image)



        blank_image = np.zeros((img.shape[0],img.shape[1],3), np.uint8)
        blank_image[0:img.shape[0], 0:img.shape[1]] = 0, 0, 0
        
        gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 80, 255, 1)


        contours, _ = cv2.findContours(thresh, cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)

        for i in contours:
            if cv2.contourArea(i):

                x,y,w,h = cv2.boundingRect(i)
                cv2.fillPoly(blank_image, pts =[i], color=(255,255,255))
    
                crop = thresh[y:y+h, x:x+w]
                cv2.imshow("crop", crop)
                cv2.waitKey(0)

        return img



    @staticmethod
    def show_img(img):
        #cv2.imshow("image", img)
        pass




if __name__ == "__main__":

    path = "picture/{}"
    image_package = ["a.png", "c.png", "d.png"]

    #for i in image_package:
    
    resolv_cap = Picture()
 
    for i in image_package:

        img = resolv_cap.open_img(path.format(i))
        resolv_cap.show_img(img)

    #BBBBBBB NEST PAS COMME LES AUTRES























    
