import cv2
import operator
import numpy as np
from PIL import Image
from matplotlib.pyplot import *
from collections import defaultdict
import math

def adjust_gamma(image, gamma):

    invGamma = 1.0 / gamma
    table = np.array([((i / 255.0) ** invGamma) * 255
            for i in np.arange(0, 256)]).astype("uint8")
    return cv2.LUT(image, table)

def make_line(thresh):
    """We make line for detect more than one area
    with border, on eyelashes is paste to the border"""

    cv2.line(thresh, (0, 0), (0, thresh.shape[0]), (0), 2)
    cv2.line(thresh, (0, 0), (thresh.shape[1], 0), (0), 2)

    cv2.line(thresh,
             (thresh.shape[1], 0),
             (thresh.shape[1], thresh.shape[0]), (0), 2)

    cv2.line(thresh, (0,  thresh.shape[0]),
             (thresh.shape[1], thresh.shape[0]), (0), 2)



class Picture:

    @staticmethod
    def resizer_picture(crop):
        image_pil = Image.fromarray(crop).convert("LA").resize((8, 8), Image.ANTIALIAS).save("treatment.png")
        

    @staticmethod
    def open_img(image):

        img = cv2.imread(image)


        blank_image = np.zeros((img.shape[0],img.shape[1],3), np.uint8)
        blank_image[0:img.shape[0], 0:img.shape[1]] = 0, 0, 0
        
        gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 100, 255, 1)#30/100
        #30 pour a
        #100 pour c
        contours, _ = cv2.findContours(thresh, cv2.RETR_TREE,
                                       cv2.CHAIN_APPROX_SIMPLE)

        for i in contours:
            if cv2.contourArea(i) < 0.5:
                cv2.drawContours(thresh, [i], -1, (0,0,0), 1)

        cv2.imwrite("treatment.png", thresh)
        cv2.imshow("dzadza", thresh)
        cv2.waitKey(0)




        
        img = cv2.imread("treatment.png", 0);img = cv2.resize(img, (1400, 1000))

        _, thresh = cv2.threshold(img, 100, 255, 0)#120/30

        contours, _ = cv2.findContours(thresh, cv2.RETR_TREE,
                                        cv2.CHAIN_APPROX_SIMPLE)

        print(len(contours))
        if len(contours) > 60:
            for i in contours:
                if cv2.contourArea(i) < 400:
                    cv2.drawContours(img, [i], -1, (255,255,255), 3)
                
        cv2.imwrite("treatment.png", img)
        cv2.imshow("dzadzadaz1564984", img)
        cv2.waitKey(0)



        img = cv2.imread("treatment.png", 0)
        _, thresh = cv2.threshold(img, 40, 255, 0)#120/30
        contours, _ = cv2.findContours(thresh, cv2.RETR_TREE,
                                       cv2.CHAIN_APPROX_SIMPLE)


        cv2.imshow("thresh123123", thresh)
        cv2.waitKey(0)

        numbers_position = []

        print(len(contours))

        for i in contours:
            if cv2.contourArea(i):
 
                x,y,w,h = cv2.boundingRect(i)
                cv2.fillPoly(blank_image, pts =[i], color=(255,255,255))

                crop = thresh[y-1:y+h+1, x-1:x+w+1]
                #make_line(crop)

                numbers_position.append([x, y])
                resolv_cap.resizer_picture(crop)

                if len(contours) > 250:
                    pass



                try:
                    cv2.imshow("crop", crop)
                    cv2.waitKey(0)
                except:
                    pass

        return img


if __name__ == "__main__":

    path = "picture/{}"
    #image_package = ["picture/a.png", "picture/c.png", "picture/d.png"]



##    image_package = ["picture/d.png"]
##    
##    for i in image_package:
##        
##        img = cv2.imread(i, 0)
##        _, thresh = cv2.threshold(img, 100, 255, 1)
##
##        contours, _ = cv2.findContours(thresh, cv2.RETR_TREE,
##                                       cv2.CHAIN_APPROX_SIMPLE)
##
##        for i in contours:
##            if cv2.contourArea(i) < 4:
##                cv2.drawContours(thresh, [i], -1, (0,0,0), 2)
##
##        _, thresh = cv2.threshold(thresh, 200, 255, 0)
##
##        cv2.imshow("crop", thresh)
##        cv2.waitKey(0)





    image_package = ["d.png"]
    #for i in image_package:
    
    resolv_cap = Picture()
 
    for i in image_package:

        img = resolv_cap.open_img(path.format(i))


    #BBBBBBB NEST PAS COMME LES AUTRES























    
