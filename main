import os
import cv2
import numpy as np
import matplotlib.pyplot as plt

import operator
from PIL import Image
from collections import defaultdict

from sklearn import datasets
from sklearn import svm
import matplotlib.pyplot as plt
import cv2
import numpy as np

def data():
    digits = datasets.load_digits()
    clf = svm.SVC(gamma=0.0001, C=100)

    x,y = digits.data[:-1], digits.target[:-1]
    clf.fit(x,y)

    return clf


def treatment_picture_threshold():


    img = cv2.imread("treatment.png", 0);img = cv2.resize(img, (16, 64))

    #len(contour)

    _, thresh = cv2.threshold(img, 200, 255, 0)#120


    cv2.imwrite("test.png", thresh)
    cv2.imshow("crop", thresh)
    cv2.waitKey(0)


def treatment_picture_to_dataset_form():

    img1 = cv2.imread("test.png", 0);img1 = cv2.resize(img1, (8, 8))
    img = img1.astype("float64")
    #print(type(img))
    #print(img)

    img16 = []
    liste_w = []
    for i in img:
        for j in i:
            j = int(j/16); j = float(j)
            img16.append(j)

    img16 = np.array(img16, dtype=np.float32)
    img16 = img16.reshape(1, -1)
    #print(img16)

    return img16, img1

def main():
    clf = data()
    treatment_picture_threshold()
    img16, img1 = treatment_picture_to_dataset_form()

    print('Prediction:',clf.predict(img16))
##    plt.imshow(img1, cmap="gray")
##    plt.show()

    return clf.predict(img16)[0]



def adjust_gamma(image, gamma):
    """We add light to the video, we play with gamma"""

    invGamma = 1.0 / gamma
    table = np.array([((i / 255.0) ** invGamma) * 255
            for i in np.arange(0, 256)]).astype("uint8")

    return cv2.LUT(image, table)

def main_color(image):
    dico = {}

    im = Image.fromarray(image)
    for value in im.getdata():
        if value in dico.keys():
            dico[value] += 1
        else:
            dico[value] = 1

    max_value = 0
    color = []
    for key, value in dico.items():
        if value > max_value:
            max_value = value
            color = key

    liste = []
    for key, value in dico.items():
        if value > 100:
            liste.append(key)


    return color, liste


def switch_background(img):

    for i in range(img.shape[0]):
        for j in range(img.shape[1]):
            if img[i, j][0] == 0 and\
               img[i, j][0] == 0 and\
               img[i, j][0] == 0:
                img[i, j] = 255, 255, 255
    return img


def croping_y_picture(img):

    y1 = int(img.shape[0] /6.5)
    crop = img[y1:img.shape[0]-50, 200:img.shape[1]-150]

    return crop



liste = os.listdir("picture")

c = 0

for image in liste:

    path = "picture/{}"
    img = cv2.imread(path.format(image))
    
    background_picture, colors = main_color(img)

    if background_picture == (0, 0, 0):
        img = switch_background(img)


    img = croping_y_picture(img)

    gray=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, img = cv2.threshold(gray, 150, 255, 0)

    for i in range(img.shape[0]):
        for j in range(img.shape[1]):
            try:
                crop = img[j:j+15, i:i+15]     
                cv2.imwrite(str(c) + ".png", crop)
                #main()
            except:
                pass
               

        c += 1

























